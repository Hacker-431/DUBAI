Hereâ€™s how you can create a Standard Calculator App in Android Studio (as shown in your image) using Kotlin. It includes basic operations: addition, subtraction, multiplication, division, and percentage.

ðŸ§± Step-by-Step Guide to Create Calculator in Android Studio
âœ… 1. Create a New Android Project
Open Android Studio â†’ New Project â†’ Empty Activity

Name it: StandardCalculator

Language: Kotlin

Finish

ðŸ§® 2. Design the Layout

Open res/layout/activity_main.xml and replace with:(XML FILE)
....
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    android:gravity="center_horizontal">

    <TextView
        android:id="@+id/tvInput"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textSize="36sp"
        android:gravity="end"
        android:padding="24dp"
        android:text=""/>

    <GridLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:columnCount="4"
        android:rowCount="5"
        android:layout_marginTop="16dp"
        android:alignmentMode="alignMargins"
        android:useDefaultMargins="true">

        <!-- Row 1 -->
        <Button android:text="DEL" android:id="@+id/btnDel" />
        <Button android:text="C" android:id="@+id/btnClear" />
        <Button android:text="%" android:id="@+id/btnPercent" />
        <Button android:text="+" android:id="@+id/btnAdd" />

        <!-- Row 2 -->
        <Button android:text="1" android:id="@+id/btn1" />
        <Button android:text="2" android:id="@+id/btn2" />
        <Button android:text="3" android:id="@+id/btn3" />
        <Button android:text="/" android:id="@+id/btnDivide" />

        <!-- Row 3 -->
        <Button android:text="4" android:id="@+id/btn4" />
        <Button android:text="5" android:id="@+id/btn5" />
        <Button android:text="6" android:id="@+id/btn6" />
        <Button android:text="-" android:id="@+id/btnSubtract" />

        <!-- Row 4 -->
        <Button android:text="7" android:id="@+id/btn7" />
        <Button android:text="8" android:id="@+id/btn8" />
        <Button android:text="9" android:id="@+id/btn9" />
        <Button android:text="x" android:id="@+id/btnMultiply" />

        <!-- Row 5 -->
        <Button android:text="." android:id="@+id/btnDot" />
        <Button android:text="0" android:id="@+id/btn0" />
        <Button android:text="=" android:id="@+id/btnEqual" android:layout_columnSpan="2"/>
    </GridLayout>
</LinearLayout>

ðŸ§  3. Add the Logic in MainActivity.kt
(MainActivity.kt FILE)

kotlin
....
package com.example.standardcalculator

import android.os.Bundle
import android.widget.Button
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity

class MainActivity : AppCompatActivity() {

    private lateinit var input: TextView
    private var expression = ""

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        input = findViewById(R.id.tvInput)

        val buttons = listOf(
            R.id.btn0, R.id.btn1, R.id.btn2, R.id.btn3, R.id.btn4,
            R.id.btn5, R.id.btn6, R.id.btn7, R.id.btn8, R.id.btn9,
            R.id.btnAdd, R.id.btnSubtract, R.id.btnMultiply, R.id.btnDivide,
            R.id.btnDot, R.id.btnPercent
        )

        for (id in buttons) {
            findViewById<Button>(id).setOnClickListener {
                val value = (it as Button).text.toString()
                expression += value
                input.text = expression
            }
        }

        findViewById<Button>(R.id.btnClear).setOnClickListener {
            expression = ""
            input.text = ""
        }

        findViewById<Button>(R.id.btnDel).setOnClickListener {
            if (expression.isNotEmpty()) {
                expression = expression.dropLast(1)
                input.text = expression
            }
        }

        findViewById<Button>(R.id.btnEqual).setOnClickListener {
            try {
                val result = evaluateExpression(expression.replace("x", "*"))
                input.text = result.toString()
                expression = result.toString()
            } catch (e: Exception) {
                input.text = "Error"
                expression = ""
            }
        }
    }

    private fun evaluateExpression(expr: String): Double {
        return object : Any() {
            var pos = -1
            var ch = 0

            fun nextChar() {
                ch = if (++pos < expr.length) expr[pos].code else -1
            }

            fun eat(charToEat: Int): Boolean {
                while (ch == ' '.code) nextChar()
                if (ch == charToEat) {
                    nextChar()
                    return true
                }
                return false
            }

            fun parse(): Double {
                nextChar()
                val x = parseExpression()
                if (pos < expr.length) throw RuntimeException("Unexpected: " + ch.toChar())
                return x
            }

            fun parseExpression(): Double {
                var x = parseTerm()
                while (true) {
                    x = when {
                        eat('+'.code) -> x + parseTerm()
                        eat('-'.code) -> x - parseTerm()
                        else -> return x
                    }
                }
            }

            fun parseTerm(): Double {
                var x = parseFactor()
                while (true) {
                    x = when {
                        eat('*'.code) -> x * parseFactor()
                        eat('/'.code) -> x / parseFactor()
                        eat('%'.code) -> x % parseFactor()
                        else -> return x
                    }
                }
            }

            fun parseFactor(): Double {
                if (eat('+'.code)) return parseFactor() // unary plus
                if (eat('-'.code)) return -parseFactor() // unary minus

                var x: Double
                val startPos = pos
                if (eat('('.code)) {
                    x = parseExpression()
                    eat(')'.code)
                } else if ((ch in '0'.code..'9'.code) || ch == '.'.code) {
                    while ((ch in '0'.code..'9'.code) || ch == '.'.code) nextChar()
                    x = expr.substring(startPos, pos).toDouble()
                } else {
                    throw RuntimeException("Unexpected: " + ch.toChar())
                }

                return x
            }
        }.parse()
    }
}
âœ… Run the App
Now click Run, and you'll have a functional calculator like in your screenshot:

âœ… Supports: + - x / % .

âœ… Includes: DEL, C, and =

